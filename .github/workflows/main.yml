name: PWA CI/CD Workflow - Main

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions: write-all

jobs:
  format-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20"
      - name: Install dependencies
        run: yarn install
      - name: Run Prettier
        run: yarn format

  lint:
    needs: format-check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.MY_GH_TOKEN }}
      - name: Cache Node Modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20"
      - name: Install dependencies
        run: yarn install
      - name: Run ESLint
        run: yarn lint

  unit-integration-tests:
    needs: lint
    runs-on: ubuntu-latest
    outputs:
      jest_exit_code: ${{ steps.set_exit_code.outputs.exit_code }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.MY_GH_TOKEN }}
      - name: Cache Node Modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20"
      - name: Install dependencies
        run: yarn install
      - name: Run Jest Tests
        id: set_exit_code
        run: |
          set +e
          yarn test:unit --coverage || exit_code=$?
          echo "::set-output name=exit_code::$exit_code"
          echo "exit_code=$exit_code" >> $GITHUB_ENV
          set -e
      - name: Handle Jest Failure
        if: env.exit_code != '0'
        run: |
          echo "Jest tests failed. Reverting to previous version..."
          git config --global user.email "20210658@uthh.edu.mx"
          git config --global user.name "rodrigo3829l"
          git reset --hard HEAD^
          git push origin main --force
      - name: Upload Jest Test Results
        uses: actions/upload-artifact@v3
        with:
          name: jest-results
          path: coverage/

  sonar-scan:
    needs: unit-integration-tests
    if: ${{ needs.unit-integration-tests.outputs.jest_exit_code == '0' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.MY_GH_TOKEN }}
      - name: Cache Node Modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20"
      - name: Install dependencies
        run: yarn install
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  snyk-scan:
    needs: sonar-scan
    if: ${{ needs.unit-integration-tests.outputs.jest_exit_code == '0' }}
    runs-on: ubuntu-latest
    outputs:
      snyk_exit_code: ${{ steps.set_exit_code.outputs.exit_code }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.MY_GH_TOKEN }}
      - name: Cache Node Modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20"
      - name: Install dependencies
        run: yarn install
      - name: Install Snyk CLI
        run: npm install -g snyk
      - name: Run Snyk Scan
        id: set_exit_code
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          snyk monitor --all-projects --org=6ce58cdd-2e65-4c0c-bbe5-705980cee5fe
          snyk test --all-projects --org=6ce58cdd-2e65-4c0c-bbe5-705980cee5fe || exit_code=$?
          echo "::set-output name=exit_code::$exit_code"
          echo "exit_code=$exit_code" >> $GITHUB_ENV
      - name: Handle Snyk Failure
        if: env.exit_code != '0'
        run: |
          echo "Snyk scan failed. Reverting to previous version..."
          git config --global user.email "20210658@uthh.edu.mx"
          git config --global user.name "rodrigo3829l"
          git reset --hard HEAD^
          git push origin main --force

  deploy-staging:
    needs: snyk-scan
    if: ${{ needs.unit-integration-tests.outputs.jest_exit_code == '0' && needs.snyk-scan.outputs.snyk_exit_code == '0' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.MY_GH_TOKEN }}
      - name: Cache Node Modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20"
      - name: Install dependencies
        run: yarn install
      - name: Build project
        run: yarn build
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: dist/
          retention-days: 7
      - name: Install lftp
        run: sudo apt-get install lftp
      - name: Deploy to Hostinger via FTPS (with exclusions)
        env:
          FTP_HOST: ${{ secrets.FTP_HOST }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
        run: |
          lftp -e "
            set ssl:verify-certificate no;
            set ftp:ssl-force true;
            set ftp:ssl-protect-data true;
            set ftp:ssl-protect-list true;
            set ftp:ssl-allow yes;
            open -u $FTP_USERNAME,$FTP_PASSWORD $FTP_HOST;
            mirror -R --only-newer --exclude .htaccess ./dist /public_html/staging;
            quit
          "

  e2e-tests-staging:
    needs: deploy-staging
    if: ${{ needs.unit-integration-tests.outputs.jest_exit_code == '0' && needs.snyk-scan.outputs.snyk_exit_code == '0' }}
    runs-on: ubuntu-latest
    outputs:
      cypress_exit_code: ${{ steps.set_exit_code.outputs.exit_code }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.MY_GH_TOKEN }}
      - name: Cache Node Modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20"
      - name: Install dependencies
        run: yarn install
      - name: Run Cypress Tests
        id: set_exit_code
        run: |
          set +e
          npx cypress run || exit_code=$?
          echo "::set-output name=exit_code::$exit_code"
          set -e
      - name: Handle Cypress Failure
        if: ${{ steps.set_exit_code.outputs.exit_code != '0' }}
        run: |
          echo "Cypress tests failed. Skipping production deployment."
      - name: Upload Cypress Test Results
        uses: actions/upload-artifact@v3
        with:
          name: cypress-results
          path: cypress/reports/

  deploy:
    needs: e2e-tests-staging
    if: ${{ needs.e2e-tests-staging.outputs.cypress_exit_code == '0' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.MY_GH_TOKEN }}
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20"
      - name: Install dependencies
        run: yarn install
      - name: Build project
        run: yarn build
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: dist/
          retention-days: 7
      - name: Install lftp
        run: sudo apt-get install lftp
      - name: Deploy to Hostinger via FTPS (with exclusions)
        env:
          FTP_HOST: ${{ secrets.FTP_HOST }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
        run: |
          lftp -e "
            set ssl:verify-certificate no;
            set ftp:ssl-force true;
            set ftp:ssl-protect-data true;
            set ftp:ssl-protect-list true;
            set ftp:ssl-allow yes;
            open -u $FTP_USERNAME,$FTP_PASSWORD $FTP_HOST;
            mirror -R --only-newer --exclude-glob admin --exclude-glob oldcosas --exclude-glob staging --exclude .htaccess ./dist /public_html;
            quit
          "
