name: PWA CI/CD Workflow - Main

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions: write-all

jobs:
  format-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20"
      - name: Install dependencies
        run: yarn install
      - name: Run Prettier
        run: yarn format

  lint:
    needs: format-check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.MY_GH_TOKEN }}
      - name: Cache Node Modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20"
      - name: Install dependencies
        run: yarn install
      - name: Run ESLint
        run: yarn lint

  unit-integration-tests:
    needs: lint
    runs-on: ubuntu-latest
    outputs:
      jest_exit_code: ${{ steps.set_exit_code.outputs.exit_code }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.MY_GH_TOKEN }}
      - name: Cache Node Modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20"
      - name: Install dependencies
        run: yarn install
      - name: Run Jest Tests
        id: set_exit_code
        run: |
          set +e
          yarn test:unit --coverage || exit_code=$?
          echo "::set-output name=exit_code::$exit_code"
          mv coverage/lcov-report ./coverage-report
          echo "exit_code=$exit_code"
          set -e
      - name: Upload Jest Test Results
        uses: actions/upload-artifact@v3
        with:
          name: jest-coverage-report
          path: coverage-report/

  post-coverage-comment-jest:
    needs: unit-integration-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v4
        if: github.event_name == 'pull_request'
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Los reportes de cobertura están disponibles en los artefactos: [Ver artefactos](${{ github.run_id }})`
            });

  jest-validation:
    needs: unit-integration-tests
    runs-on: ubuntu-latest
    if: ${{ needs.unit-integration-tests.outputs.jest_exit_code != '0' }}
    steps:
      - name: Handle Jest Failure
        run: |
          echo "Jest tests failed. Reverting to previous version..."
          git config --global user.email "20210658@uthh.edu.mx"
          git config --global user.name "rodrigo3829l"
          git reset --hard HEAD^
          git push origin main --force

  sonar-scan:
    needs: unit-integration-tests
    if: ${{ needs.unit-integration-tests.outputs.jest_exit_code == '0' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.MY_GH_TOKEN }}
      - name: Cache Node Modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20"
      - name: Install dependencies
        run: yarn install
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  snyk-scan:
    needs: sonar-scan
    if: ${{ needs.unit-integration-tests.outputs.jest_exit_code == '0' }}
    runs-on: ubuntu-latest
    outputs:
      snyk_exit_code: ${{ steps.set_exit_code.outputs.exit_code }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.MY_GH_TOKEN }}
      - name: Cache Node Modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20"
      - name: Install dependencies
        run: yarn install
      - name: Install Snyk CLI
        run: npm install -g snyk
      - name: Run Snyk Scan
        id: set_exit_code
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          set +e
          snyk monitor --all-projects --org=6ce58cdd-2e65-4c0c-bbe5-705980cee5fe
          snyk test --all-projects --org=6ce58cdd-2e65-4c0c-bbe5-705980cee5fe || exit_code=$?
          echo "::set-output name=exit_code::$exit_code"
          echo "exit_code=$exit_code"
          set -e

  snyk-validation:
    needs: snyk-scan
    if: ${{ needs.snyk-scan.outputs.snyk_exit_code != '0' }}
    runs-on: ubuntu-latest
    steps:
      - name: Handle Snyk Failure
        run: |
          echo "Snyk scan failed. Reverting to previous version..."
          git config --global user.email "20210658@uthh.edu.mx"
          git config --global user.name "rodrigo3829l"
          git reset --hard HEAD^
          git push origin main --force

  deploy-staging:
    needs: snyk-scan
    if: ${{ needs.unit-integration-tests.outputs.jest_exit_code == '0' && needs.snyk-scan.outputs.snyk_exit_code == '0' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.MY_GH_TOKEN }}
      - name: Cache Node Modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20"
      - name: Install dependencies
        run: yarn install
      - name: Build project
        run: yarn build
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: dist/
          retention-days: 7
      - name: Install lftp
        run: sudo apt-get install lftp
      - name: Deploy to Hostinger via FTPS (with exclusions)
        env:
          FTP_HOST: ${{ secrets.FTP_HOST }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
        run: |
          lftp -e "
            set ssl:verify-certificate no;
            set ftp:ssl-force true;
            set ftp:ssl-protect-data true;
            set ftp:ssl-protect-list true;
            set ftp:ssl-allow yes;
            open -u $FTP_USERNAME,$FTP_PASSWORD $FTP_HOST;
            mirror -R --only-newer --exclude .htaccess ./dist /public_html/staging;
            quit
          "

  e2e-tests-staging:
    needs: deploy-staging
    if: ${{ needs.unit-integration-tests.outputs.jest_exit_code == '0' && needs.snyk-scan.outputs.snyk_exit_code == '0' }}
    runs-on: ubuntu-latest
    outputs:
      cypress_exit_code: ${{ steps.set_exit_code.outputs.exit_code }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.MY_GH_TOKEN }}
      - name: Cache Node Modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20"
      - name: Install dependencies
        run: yarn install
      - name: Run Cypress Tests
        id: set_exit_code
        run: |
          set +e
          npx cypress run --reporter mochawesome --reporter-options reportDir=cypress/reports || exit_code=$?
          echo "::set-output name=exit_code::$exit_code"
          set -e
      - name: Handle Cypress Failure
        if: ${{ steps.set_exit_code.outputs.exit_code != '0' }}
        run: |
          echo "Cypress tests failed. Skipping production deployment."
      - name: Upload Cypress Test Results
        uses: actions/upload-artifact@v3
        with:
          name: cypress-results
          path: cypress/reports/

  post-coverage-comment-cypress:
    needs: e2e-tests-staging
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v4
        if: github.event_name == 'pull_request'
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `El reporte de Cypress está disponible en los artefactos: [Ver artefactos](${{ github.run_id }})`
            });

  deploy:
    needs: e2e-tests-staging
    if: ${{ needs.e2e-tests-staging.outputs.cypress_exit_code == '0' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.MY_GH_TOKEN }}
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20"
      - name: Install dependencies
        run: yarn install
      - name: Build project
        run: yarn build
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: dist/
          retention-days: 7
      - name: Install lftp
        run: sudo apt-get install lftp
      - name: Deploy to Hostinger via FTPS (with exclusions)
        env:
          FTP_HOST: ${{ secrets.FTP_HOST }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
        run: |
          lftp -e "
            set ssl:verify-certificate no;
            set ftp:ssl-force true;
            set ftp:ssl-protect-data true;
            set ftp:ssl-protect-list true;
            set ftp:ssl-allow yes;
            open -u $FTP_USERNAME,$FTP_PASSWORD $FTP_HOST;
            mirror -R --only-newer --exclude-glob admin --exclude-glob oldcosas --exclude-glob staging --exclude .htaccess ./dist /public_html;
            quit
          "

  notify-pr:
    if: ${{ needs.unit-integration-tests.outputs.jest_exit_code == '0' && needs.snyk-scan.outputs.snyk_exit_code == '0' }}
    runs-on: ubuntu-latest
    needs: [unit-integration-tests, snyk-scan, sonar-scan]
    steps:
      - uses: actions/github-script@v4
        with:
          script: |
            const status = Success;

            github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `CI/CD Pipeline ${status} for branch ${context.ref}.`
            });

  notify-email:
    needs: [unit-integration-tests, snyk-scan, sonar-scan]
    runs-on: ubuntu-latest
    steps:
      - name: Send Notification Email
        uses: dawidd6/action-send-mail@v3
        with:

          # Configuración alternativa si no se usa connection_url
          server_address: ${{ secrets.SMTP_HOST }}
          server_port: ${{ secrets.SMTP_PORT }}
          secure: true
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          
          # Asunto del correo
          subject: CI/CD Pipeline Notification - ${{ github.ref_name }}

          # Dirección de remitente
          from: CI/CD Bot 20210658@uthh.edu.mx

          # Direcciones de destinatarios
          to: ${{ secrets.EMAIL_TO }}

          # Cuerpo del correo en HTML
          html_body: |
            <html lang="es">
                <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Notificación de CI/CD Pipeline</title>
                <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
                <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">
                <style>
                    body {
                    font-family: 'Poppins', sans-serif;
                    color: #fff;
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    height: 100vh;
                    margin: 0;
                    }
                    .container {
                    background-color: #195131;
                    border-radius: 12px;
                    padding: 20px 30px;
                    width: 420px;
                    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.4);
                    }
                    h2 {
                    text-align: center;
                    font-size: 24px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    gap: 10px;
                    }
                    .details {
                    display: flex;
                    flex-direction: column;
                    gap: 10px;
                    background-color: #145234;
                    border-radius: 8px;
                    padding: 15px;
                    margin: 15px 0;
                    }
                    .details p {
                    margin: 0;
                    display: flex;
                    align-items: center;
                    gap: 8px;
                    font-size: 16px;
                    }
                    .status {
                    margin: 20px 0;
                    }
                    .status ul {
                    list-style-type: none;
                    padding: 0;
                    }
                    .status li {
                    margin: 10px 0;
                    font-size: 18px;
                    display: flex;
                    align-items: center;
                    gap: 10px;
                    }
                    a {
                    color: #4cd137;
                    text-decoration: none;
                    font-weight: 600;
                    }
                    .footer {
                    text-align: center;
                    margin-top: 20px;
                    font-size: 12px;
                    opacity: 0.8;
                    }
                    .icon {
                    background-color: #0f2b20;
                    padding: 6px;
                    border-radius: 6px;
                    }
                </style>
                </head>
                <body>
                <div class="container">
                    <h2><i class="fas fa-rocket icon"></i> ¡Tu Pipeline ha finalizado!</h2>

                    <div class="details">
                    <p><i class="fas fa-code-branch"></i> <strong>Rama:</strong> <code>${{ github.ref_name }}</code></p>
                    <p><i class="fas fa-book"></i> <strong>Repositorio:</strong> <a href="https://github.com/${{ github.repository }}">${{ github.repository }}</a></p>
                    <p><i class="fas fa-hashtag"></i> <strong>Commit:</strong> <a href="https://github.com/${{ github.repository }}/commit/${{ github.sha }}">${{ github.sha }}</a></p>
                    <p><i class="fas fa-id-badge"></i> <strong>ID de Ejecución:</strong> <a href="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}">${{ github.run_id }}</a></p>
                    </div>

                    <div class="status">
                    <h3>¿Cómo fue? 🤔</h3>
                    <ul>
                        <li>
                        <i class="fas fa-check-circle" style="color: #4cd137;"></i> 
                        Pruebas Jest: 
                        ${{ needs.unit-integration-tests.outputs.jest_exit_code == '0' && '¡Éxito! 🎉' || '❌ Falló' }}
                        </li>
                        <li>
                        <i class="fas fa-shield-alt" style="color: #4cd137;"></i> 
                        Escaneo Snyk: 
                        ${{ needs.snyk-scan.outputs.snyk_exit_code == '0' && '¡Todo en orden! 🛡️' || '❌ Falló' }}
                        </li>
                    </ul>
                    </div>

                    <p>Consulta los registros completos del pipeline <a href="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}">aquí</a>.</p>

                    <div class="footer">
                    <p>Este es un mensaje automatizado de tu bot de CI/CD. No es necesario responder. 🤖</p>
                    </div>
                </div>
                </body>
                </html>


